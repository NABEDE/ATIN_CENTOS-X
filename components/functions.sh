#!/bin/bash
# D√©tecte le chemin du dossier o√π se trouve ce script, m√™me si appel√© depuis ailleurs
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"

# Fonction utilitaire pour sourcer un fichier ou sortir proprement si absent
safe_source() {
    local file="$1"
    if [[ -f "$file" ]]; then
        source "$file"
    else
        echo "‚ùå Fichier requis introuvable : $file"
        exit 1
    fi
}

# Sourcing s√©curis√© des d√©pendances
safe_source "$SCRIPT_DIR/variables.sh"
safe_source "$SCRIPT_DIR/logo.sh"

# ---------- Fonctions utilitaires d'affichage et de logs ----------

info_msg()    { echo -e "${BLUE}$1${NC}" | tee -a "$LOG_FILE"; }
success_msg() { echo -e "${GREEN}$1${NC}" | tee -a "$LOG_FILE"; }
warn_msg()    { echo -e "${YELLOW}AVERTISSEMENT: $1${NC}" | tee -a "$LOG_FILE"; }
error_msg()   { echo -e "${RED}ERREUR: $1${NC}" | tee -a "$LOG_FILE" >&2; }
error_exit()  { error_msg "$1"; exit 1; }

log_action()  { echo "$(date '+%F %T') [ACTION] $1" >> "$LOG_FILE"; }
log_debug()   { [ "$DEBUG" = "1" ] && echo "$(date '+%F %T') [DEBUG] $1" >> "$LOG_FILE"; }

# ---------- V√©rifications pr√©alables ----------

check_root() {
    if [ "$EUID" -ne 0 ]; then
        error_exit "Ce script doit √™tre ex√©cut√© en tant que root (sudo)."
    fi
}

verification_os() {
    if [ -f /etc/os-release ]; then
        . /etc/os-release
        if [[ "$ID" == "centos" || "$ID_LIKE" == *"rhel"* ]]; then
            version=$(grep "^VERSION_ID=" /etc/os-release | cut -d '"' -f2)
            success_msg "Syst√®me d√©tect√© : CentOS (version $version)"
        else
            error_exit "Ce script est con√ßu uniquement pour CentOS ou d√©riv√©s RHEL. Syst√®me d√©tect√© : $ID"
        fi
    else
        error_exit "/etc/os-release introuvable. Impossible de d√©tecter l'OS."
    fi
}

# ---------- Gestion du pare-feu ----------

check_firewalld() {
    if ! systemctl is-active --quiet firewalld; then
        info_msg "‚ùå firewalld n'est pas actif. Activation..."
        sudo systemctl start firewalld
        sudo systemctl enable firewalld
        success_msg "‚úÖ firewalld est maintenant actif."
    fi
}

reload_firewalld() {
    sudo firewall-cmd --reload > /dev/null
}

# ---------- Fonctions am√©lior√©es ----------

# Sauvegarde/restauration simple d'un fichier ou dossier
backup_file() {
    local target="$1"
    local backup_dir="/var/backups/atin"
    mkdir -p "$backup_dir"
    local ts="$(date +%F_%H%M%S)"
    if [ -e "$target" ]; then
        cp -a "$target" "$backup_dir/$(basename "$target").bak.$ts"
        success_msg "‚úÖ Sauvegarde de $target dans $backup_dir"
    else
        warn_msg "‚ö†Ô∏è  Fichier/r√©pertoire $target non trouv√© pour la sauvegarde."
    fi
}

restore_file() {
    local backup_file="$1"
    local dest="$2"
    if [ -f "$backup_file" ]; then
        cp -a "$backup_file" "$dest"
        success_msg "‚úÖ Restauration de $backup_file vers $dest"
    else
        error_msg "‚ùå Fichier de sauvegarde $backup_file introuvable."
    fi
}

# Gestion utilisateurs
add_user() {
    local user="$1"
    if id "$user" &>/dev/null; then
        warn_msg "L'utilisateur $user existe d√©j√†."
    else
        sudo useradd -m "$user" && success_msg "Utilisateur $user cr√©√©."
    fi
}

del_user() {
    local user="$1"
    if id "$user" &>/dev/null; then
        sudo userdel -r "$user" && success_msg "Utilisateur $user supprim√©."
    else
        warn_msg "L'utilisateur $user n'existe pas."
    fi
}

# Contr√¥le de s√©curit√© rapide (fail2ban, SELinux, root login SSH, etc.)
security_audit() {
    info_msg "üîí Audit de s√©curit√© du syst√®me..."

    # V√©rification du statut de SELinux
    if command -v getenforce >/dev/null; then
        selinux_status=$(getenforce)
        info_msg "SELinux : $selinux_status"
    else
        warn_msg "SELinux non d√©tect√©."
    fi

    # V√©rification du mot de passe root SSH
    if grep -q "^PermitRootLogin" /etc/ssh/sshd_config 2>/dev/null; then
        ssh_root=$(grep "^PermitRootLogin" /etc/ssh/sshd_config | awk '{print $2}')
        if [ "$ssh_root" == "yes" ]; then
            warn_msg "Connexion root SSH autoris√©e ‚ö†Ô∏è"
        else
            success_msg "Connexion root SSH d√©sactiv√©e."
        fi
    fi

    # Fail2ban
    if systemctl is-active fail2ban &>/dev/null; then
        success_msg "Fail2ban actif."
    else
        warn_msg "Fail2ban inactif ou non install√©."
    fi
}

# Surveillance CPU/m√©moire (simple)
monitoring_report() {
    info_msg "üìä √âtat du syst√®me :"
    echo "Uptime : $(uptime -p)"
    echo "Usage CPU : $(top -bn1 | grep "Cpu(s)" | awk '{print $2 + $4}')%"
    echo "Usage RAM : $(free -h | awk '/Mem/ {print $3 " / " $2}')"
    echo "Processus principaux :"
    ps aux --sort=-%mem | head -n 6
}

# Notification mail (optionnelle)
send_mail() {
    local subject="$1"
    local body="$2"
    local dest="$3"
    if command -v mail >/dev/null; then
        echo "$body" | mail -s "$subject" "$dest"
        success_msg "‚úâÔ∏è  Notification envoy√©e √† $dest"
    else
        warn_msg "Mail non install√©, notification non envoy√©e."
    fi
}

# G√©n√©rer un rapport complet syst√®me
generate_full_report() {
    local report_file="/tmp/atin_system_report_$(date +%F_%H%M%S).txt"
    {
        echo "===== RAPPORT SYSTEME $(date) ====="
        hostnamectl
        echo ""
        df -hT
        echo ""
        free -h
        echo ""
        echo "Processus principaux :"
        ps aux --sort=-%mem | head -n 10
        echo ""
        echo "Utilisateurs connect√©s :"
        w
        echo ""
        echo "Derniers logs d'erreur :"
        journalctl -p err -n 20
    } > "$report_file"
    success_msg "‚úÖ Rapport g√©n√©r√© : $report_file"
}

# ---------- Menu utilisateur enrichi ----------

user_interaction() {
    echo -e "${RED}=========== ATIN_CENTOS-1.0 ================${NC}"
    logo
    echo " ===================================================="
    echo "1. Mettre √† jour tous les paquets install√©s sur votre Syst√®me Centos"
    echo "2. Nettoyer le cache des paquets et supprimer les paquets orphelins"
    echo "3. V√©rifier l'utilisation de l'espace disque"
    echo "4. Identifier les fichiers ou r√©pertoires les plus volumineux"
    echo "5. Nettoyer les fichiers temporaires ou les vieux logs"
    echo "6. D√©marrer, arr√™ter, red√©marrer et v√©rifier l'√©tat des services (systemctl)"
    echo "7. G√©rer les services au d√©marrage du syst√®me"
    echo "8. Ajouter ou supprimer des r√®gles de pare-feu"
    echo "9. Activer ou d√©sactiver des zones de pare-feu"
    echo "10. Recharger les configurations du pare-feu"
    echo "11. Automatiser l'installation de serveurs web, bases de donn√©es, langages"
    echo "12. G√©rer l'ajout de d√©p√¥ts tiers (EPEL, Remi, etc.)"
    echo "13. Afficher l'√©tat des interfaces r√©seau"
    echo "14. Changer l'adresse IP statique ou configurer le DHCP"
    echo "15. Rechercher des erreurs ou des avertissements dans les journaux"
    echo "16. Archiver ou purger les anciens fichiers journaux"
    echo "17. V√©rifier l'√©tat du swap"
    echo "18. Cr√©er et activer un fichier de swap si n√©cessaire"
    echo "19. G√©n√©rer des rapports syst√®me (CPU/m√©moire, uptime, etc.)"
    echo "20. Stocker ces rapports dans un fichier ou les envoyer par e-mail"
    echo "21. Gestion des utilisateurs (ajout/suppression)"
    echo "22. Sauvegarder/restaurer un fichier/r√©pertoire"
    echo "23. Audit s√©curit√© rapide"
    echo "24. G√©n√©rer un rapport complet du syst√®me"
    echo "25. Quitter"
}

# ---------- Fonctions suppl√©mentaires ----------

show_help() {
    echo -e "${BLUE}Naviguez vers le dossier apps : cd app/centos${NC}"
    echo -e "${BLUE}Rendre ex√©cutable le fichier install : chmod +x install.sh${NC}"
    echo -e "${BLUE}Utilisation: sudo ./install.sh${NC}"
    echo -e "${BLUE}Ce script va vous aider dans l'administration Syst√®me Centos.${NC}"
    echo -e "${BLUE}Options disponibles:${NC}"
    echo -e "${GREEN}--help${NC}    Affiche ce message d'aide."
    echo -e "${GREEN}--no-confirm${NC}  Ex√©cute le script sans demander de confirmation."
    echo -e "\n${YELLOW}Assurez-vous d'avoir une connexion internet active.${NC}"
    exit 0
}

# ---------- Exemple d'int√©gration des nouvelles fonctions dans le switch ----------

switch_function() {
    case $number_for_assistance in
        # ... (toutes tes cases pr√©c√©dentes inchang√©es)
        21*)
            echo "üë§ Gestion des utilisateurs"
            echo "1) Ajouter"
            echo "2) Supprimer"
            read -rp "Choix : " user_action
            read -rp "Nom d'utilisateur : " username
            case $user_action in
                1) add_user "$username" ;;
                2) del_user "$username" ;;
                *) warn_msg "Action inconnue." ;;
            esac
        ;;
        22*)
            echo "üóÇÔ∏è  Sauvegarder ou restaurer un fichier/r√©pertoire"
            echo "1) Sauvegarder"
            echo "2) Restaurer"
            read -rp "Choix : " backup_action
            case $backup_action in
                1)
                    read -rp "Chemin √† sauvegarder : " target
                    backup_file "$target"
                    ;;
                2)
                    read -rp "Fichier de sauvegarde : " backup
                    read -rp "Destination : " dest
                    restore_file "$backup" "$dest"
                    ;;
                *) warn_msg "Action inconnue." ;;
            esac
        ;;
        23*)
            security_audit
        ;;
        24*)
            generate_full_report
        ;;
        25*)
            info_msg "üëã Merci d'avoir utilis√© ATIN_CENTOS. √Ä bient√¥t !"
            exit 0
        ;;
        *)
            warn_msg "Choix non reconnu. Merci de s√©lectionner un √©l√©ment du menu."
        ;;
    esac
}

# ---------- FIN DU FICHIER ----------