#!/bin/bash
source ./variables.sh
source ./logo.sh
# ---------- La partie fonction de ATIN_CENTOS ------------------

# --- Fonctions d'affichage ---
function error_exit {
    echo -e "${RED}ERREUR: $1${NC}" | tee -a "$LOG_FILE" >&2 # Affiche l'erreur en rouge gras et log
    exit 1
}

# --- Fonctions pour les commandes ------

# Check if firewalld is active
check_firewalld() {
    if ! systemctl is-active --quiet firewalld; then
        echo "‚ùå firewalld n'est pas actif. Activation..."
        sudo systemctl start firewalld
        sudo systemctl enable firewalld
        echo "‚úÖ firewalld est maintenant actif."
    fi
}

# Reload firewall after changes
reload_firewalld() {
    sudo firewall-cmd --reload > /dev/null
}

function info_msg {
    echo -e "${BLUE}$1${NC}" | tee -a "$LOG_FILE" # Affiche l'information en bleu gras et log
}

function success_msg {
    echo -e "${GREEN}$1${NC}" | tee -a "$LOG_FILE" # Affiche le succ√®s en vert gras et log
}

function warn_msg {
    echo -e "${YELLOW}AVERTISSEMENT: $1${NC}" | tee -a "$LOG_FILE" # Affiche l'avertissement en jaune gras et log
}

# --- Fonction pour v√©rifier si le script est ex√©cut√© en tant que root ---
function check_root {
    if [ "$EUID" -ne 0 ]; then
        echo "Ce script doit √™tre ex√©cut√© en tant que root (sudo)."
        exit 1
    fi
}

# --- Fonction pour v√©rifier si le syst√®me d'exploitation est compatible ---
function verification_os {
    info_msg() { echo -e "‚ÑπÔ∏è  $1"; }
    success_msg() { echo -e "‚úÖ $1"; }
    error_exit() { echo -e "‚ùå $1"; exit 1; }

    if [ -f /etc/os-release ]; then
        . /etc/os-release
        if [[ "$ID" == "centos" || "$ID_LIKE" == *"rhel"* ]]; then
            version=$(grep "^VERSION_ID=" /etc/os-release | cut -d '"' -f2)
            success_msg "Syst√®me d√©tect√© : CentOS (version $version)"
        else
            error_exit "Ce script est con√ßu uniquement pour CentOS ou d√©riv√©s RHEL. Syst√®me d√©tect√© : $ID"
        fi
    else
        error_exit "/etc/os-release introuvable. Impossible de d√©tecter l'OS."
    fi
}

# ----------- Fonction pour afficher les √©l√©ments pour interagir avec l'utilisateur ------------------------
function user_interaction {
    # ----------------- Pr√©sentation des √©l√©ments de choix pour l'utilisateur afin qu'il puisse interagir avec l'outil. ----------------------------
     echo -e "${RED}=========== ATIN_CENTOS-1.0 ================${NC}"
     # Si vous voulez une version un peu plus "√©toil√©e" visuellement :
     logo
     echo " ===================================================="
     echo "1. Mettre √† jour tous les paquets install√©s sur votre Syst√®me Centos -----"
     echo "2. Nettoyer le cache des paquets et supprimer les paquets orphelins -----"
     echo "3. V√©rifier l'utilisation de l'espace disque ---------"
     echo "4. Identifier les fichiers ou r√©pertoires les plus volumineux ------"
     echo "5. Nettoyer les fichiers temporaires ou les vieux logs --------"
     echo "6. D√©marrer, arr√™ter, red√©marrer et v√©rifier l'√©tat des services (systemctl start/stop/status/enable) ------"
     echo "7. G√©rer les services au d√©marrage du syst√®me --------"
     echo "8. Ajouter ou supprimer des r√®gles de pare-feu (ouvrir des ports, autoriser des services) ------"
     echo "9. Activer ou d√©sactiver des zones de pare-feu ---------"
     echo "10. Recharger les configurations du pare-feu ----------"
     echo "11. Automatiser l'installation de serveurs web (Apache/Nginx), de bases de donn√©es (MariaDB/PostgreSQL), ou d'environnements de scripting (PHP, Python, Node.js) etc ------"
     echo "12. G√©rer l'ajout de d√©p√¥ts tiers (EPEL, Remi, etc.) si n√©cessaire -----"
     echo "13. Afficher l'√©tat des interfaces r√©seau (ip a, ss -tulpn) ------"
     echo "14. Changer l'adresse IP statique ou configurer le DHCP (bien que cela soit souvent g√©r√© par NetworkManager sur les versions plus r√©centes) -----"
     echo "15. Rechercher des erreurs ou des avertissements sp√©cifiques dans les journaux (journalctl, /var/log/) ----"
     echo "16. Archiver ou purger les anciens fichiers journaux -------"
     echo "17. V√©rifier l'√©tat du swap (swapon --show) ----"
     echo "18. Cr√©er et activer un fichier de swap si n√©cessaire ----"
     echo "19. G√©n√©rer des rapports simples sur l'√©tat du syst√®me : utilisation du CPU/m√©moire, processus en cours, uptime -----"
     echo "20. Stocker ces rapports dans un fichier ou les envoyer par e-mail (si un MTA est configur√©) ------"
     echo "21. Quitter ---- "
}

# --- Fonction d'aide ---
function show_help {
    echo -e "${BLUE}Naviguez vers le dossier apps : cd app/centos${NC}"
    echo -e "${BLUE}Rendre ex√©cutable le fichier install : chmod +x install.sh${NC}"
    echo -e "${BLUE}Utilisation: sudo ./install.sh${NC}"
    echo -e "${BLUE}Ce script va vous aider dans l'assistance √† dans l'administration Syst√®me Centos.${NC}"
    echo -e "${BLUE}Options disponibles:${NC}"
    echo -e "${GREEN}--help${NC}    Affiche ce message d'aide."
    echo -e "${GREEN}--no-confirm${NC}  Ex√©cute le script sans demander de confirmation."
    echo -e "\n${YELLOW}Assurez-vous d'avoir une connexion internet active.${NC}"
    exit 0
}

function switch_function {
    #Code √† utiliser (Mettre √† jour tous les paquets de Centos) : sudo yum update --enablerepo='*'
    #Code √† utiliser (Mettre √† jour tous les paquets sur Centos avec dnf): sudo dnf update --enablerepo='*'
    #Code √† utiliser ( V√©rification des paquets √† installe ) : sudo dnf check-upgrade

    case $number_for_assistance in
        1.* )
            info_msg "üì¶ Mise √† jour des paquets CentOS..."

            if sudo dnf -y update --enablerepo='*'; then
                success_msg "‚úÖ Mise √† jour des paquets CentOS r√©ussie ! üéâ"
            else
                error_exit "‚ùå La mise √† jour des paquets CentOS a √©chou√© ‚ö†Ô∏è"
            fi
            ;;

        2.* )
            info_msg "üßπ Nettoyage du cache des paquets..."

            if sudo dnf clean all; then
                success_msg "‚úÖ Cache des paquets nettoy√© avec succ√®s !"
            else
                error_exit "‚ùå √âchec du nettoyage du cache des paquets."
            fi

            info_msg "üóëÔ∏è Suppression des paquets orphelins..."

            if sudo dnf autoremove -y; then
                success_msg "‚úÖ Paquets orphelins supprim√©s avec succ√®s !"
            else
                error_exit "‚ùå √âchec de la suppression des paquets orphelins."
            fi

            ;;
        3.* )
            info_msg "üíΩ V√©rification de l'utilisation de l'espace disque..."

            if df -h --total; then
                usage=$(df / | awk 'NR==2 {print $5}' | tr -d '%')
                if [ "$usage" -ge 90 ]; then
                    echo -e "‚ö†Ô∏è  Avertissement : l'utilisation du disque est √† ${usage}% !"
                fi
                success_msg "‚úÖ Utilisation de l'espace disque v√©rifi√©e."
            else
                error_exit "‚ùå √âchec de la v√©rification de l'espace disque."
            fi
            ;;

        4.* )
            TARGET_DIR="."  # Tu peux remplacer par /var, /home, etc.

            info_msg "üìÇ Identification des fichiers/r√©pertoires les plus volumineux dans '$TARGET_DIR'..."
            total_size=$(du -sh "$TARGET_DIR" 2>/dev/null | cut -f1)
            info_msg "üìä Taille totale de '$TARGET_DIR' : $total_size"

            if du -h --max-depth=1 "$TARGET_DIR" 2>/dev/null | sort -hr | head -n 10; then
                success_msg "‚úÖ Liste des fichiers/r√©pertoires les plus volumineux g√©n√©r√©e avec succ√®s."
            else
                error_exit "‚ùå √âchec de l'identification des fichiers/r√©pertoires volumineux dans '$TARGET_DIR'."
            fi
            ;;

        5.* )
            info_msg "Nettoyage des fichiers temporaires ou des vieux logs"

            read -p "‚ö†Ô∏è Cette action supprimera des fichiers dans /tmp et /var/log. Voulez-vous continuer ? (oui/non) : " confirmation

            if [[ "$confirmation" =~ ^([Oo][Uu][Ii]|[Yy]es|[Oo])$ ]]; then
                if sudo rm -rf /tmp/* /var/log/*; then
                    success_msg "‚úÖ Nettoyage des fichiers temporaires ou des vieux logs r√©ussi"
                else
                    error_exit "‚ùå Le nettoyage des fichiers temporaires ou des vieux logs a √©chou√©"
                fi
            else
                echo "‚ùé Op√©ration annul√©e par l'utilisateur."
            fi
            ;;

        6.* )
            info_msg "‚öôÔ∏è  Gestion interactive des services systemctl"

            # R√©cup√©rer la liste des services disponibles
            mapfile -t services < <(systemctl list-units --type=service --all --no-pager --no-legend | awk '{print $1}')

            if [ ${#services[@]} -eq 0 ]; then
                error_exit "‚ùå Aucun service systemctl trouv√© sur ce syst√®me."
            fi

            # Afficher les services avec num√©rotation
            echo "üìã Liste des services disponibles :"
            for i in "${!services[@]}"; do
                printf "%3d) %s\n" $((i+1)) "${services[$i]}"
            done

            # S√©lection du service
            read -rp "üî¢ Entrez le num√©ro du service √† g√©rer : " service_index

            # Validation du num√©ro
            if ! [[ "$service_index" =~ ^[0-9]+$ ]] || [ "$service_index" -lt 1 ] || [ "$service_index" -gt "${#services[@]}" ]; then
                error_exit "üö´ Num√©ro de service invalide."
            fi

            SERVICE_NAME="${services[$((service_index-1))]}"
            info_msg "üîß Service s√©lectionn√© : $SERVICE_NAME"

            # Choix de l'action
            echo "üéõÔ∏è  Actions possibles : start, stop, restart, status, enable, disable"
            read -rp "üß≠ Entrez l'action √† effectuer : " ACTION

            case "$ACTION" in
                start|stop|restart|status|enable|disable)
                    info_msg "üîß Ex√©cution : systemctl $ACTION $SERVICE_NAME"
                    if sudo systemctl "$ACTION" "$SERVICE_NAME"; then
                        success_msg "‚úÖ Action '$ACTION' sur '$SERVICE_NAME' ex√©cut√©e avec succ√®s."
                    else
                        error_exit "‚ùå L'action '$ACTION' sur '$SERVICE_NAME' a √©chou√©."
                    fi
                    ;;
                *)
                    error_exit "üö´ Action invalide. Veuillez utiliser : start, stop, restart, status, enable ou disable."
                    ;;
            esac
            ;;
        7.* )
            info_msg "üõ†Ô∏è V√©rification et mise √† jour des services install√©s sur le syst√®me CentOS..."

            declare -A SERVICE_TO_PACKAGE_MAP
            declare -A UPDATES_PENDING_SERVICES

            info_msg "üì• R√©cup√©ration de la liste des services connus..."

            SERVICES=$(systemctl list-unit-files --type=service --state=enabled,static,disabled,generated --no-legend --plain --full \
                | awk '{print $1}' \
                | sed 's/\.service$//' \
                | grep -Ev '^(systemd-|dev-|proc-|sys-|tmp-|var-|run-|usr-|local-|home-|mnt-|opt-|srv-|boot-).*|.*\.mount$|.*\.slice$|.*\.socket$|.*\.path$|.*\.timer$')

            if [ -z "$SERVICES" ]; then
                error_exit "‚ùå Aucun service applicable trouv√© sur le syst√®me."
            fi

            info_msg "üîç D√©tection des paquets associ√©s et v√©rification des mises √† jour..."

            for service_name in $SERVICES; do
                package_name=""
                case "$service_name" in
                    httpd)        package_name="httpd" ;;
                    nginx)        package_name="nginx" ;;
                    mariadb)      package_name="mariadb-server" ;;
                    postgresql)   package_name="postgresql-server" ;;
                    docker)       package_name="docker-ce" ;;
                    sshd)         package_name="openssh-server" ;;
                    firewalld)    package_name="firewalld" ;;
                    crond)        package_name="cronie" ;;
                    rsyslog)      package_name="rsyslog" ;;
                    *)
                        if systemctl status "$service_name" &>/dev/null; then
                            pid=$(systemctl show "$service_name" --property=MainPID --value 2>/dev/null)
                            if [ -n "$pid" ] && [ "$pid" -ne 0 ]; then
                                binary_path=$(readlink -f "/proc/$pid/exe")
                                if [ -e "$binary_path" ]; then
                                    package_full=$(rpm -qf "$binary_path" 2>/dev/null)
                                    if [[ "$package_full" != *"is not owned by any package"* ]]; then
                                        package_name=$(echo "$package_full" | sed 's/-[0-9].*$//')
                                    fi
                                fi
                            fi
                        fi
                        [ -z "$package_name" ] && package_name="$service_name"
                        ;;
                esac

                if [ -n "$package_name" ]; then
                    SERVICE_TO_PACKAGE_MAP["$service_name"]="$package_name"
                    if sudo dnf list installed "$package_name" &>/dev/null; then
                        if sudo dnf check-update "$package_name" &>/dev/null; then
                            UPDATES_PENDING_SERVICES["$service_name"]="$package_name"
                        fi
                    fi
                fi
            done

            if [ ${#UPDATES_PENDING_SERVICES[@]} -eq 0 ]; then
                success_msg "‚úÖ Aucun service n'a de mise √† jour de paquet en attente."
            else
                info_msg "üì¶ Mises √† jour disponibles pour les services suivants :"
                for service_name in "${!UPDATES_PENDING_SERVICES[@]}"; do
                    echo " - $service_name (Paquet : ${UPDATES_PENDING_SERVICES[$service_name]})"
                done

                read -rp "üîÅ Voulez-vous mettre √† jour ces paquets ? (oui/non) : " update_confirm
                if [[ "$update_confirm" =~ ^([oO][uU][iI]|[yY][eE][sS])$ ]]; then
                    for service_name in "${!UPDATES_PENDING_SERVICES[@]}"; do
                        package_to_update="${UPDATES_PENDING_SERVICES[$service_name]}"
                        info_msg "üì§ Mise √† jour de '$package_to_update' pour '$service_name'..."
                        if sudo dnf update -y "$package_to_update"; then
                            success_msg "‚úÖ '$package_to_update' mis √† jour avec succ√®s."

                            if systemctl is-active "$service_name" &>/dev/null; then
                                info_msg "üîÅ Le service '$service_name' est actif. Red√©marrage recommand√©."
                                read -rp "üëâ Voulez-vous red√©marrer '$service_name' maintenant ? (oui/non) : " restart_service
                                if [[ "$restart_service" =~ ^([oO][uU][iI]|[yY][eE][sS])$ ]]; then
                                    info_msg "üöÄ Red√©marrage de '$service_name'..."
                                    if sudo systemctl restart "$service_name"; then
                                        success_msg "‚úÖ '$service_name' red√©marr√© avec succ√®s."
                                    else
                                        error_msg "‚ö†Ô∏è √âchec du red√©marrage de '$service_name'."
                                    fi
                                else
                                    info_msg "‚è≠Ô∏è Red√©marrage ignor√© pour '$service_name'."
                                fi
                            else
                                info_msg "‚ÑπÔ∏è  Le service '$service_name' est inactif. Aucun red√©marrage n√©cessaire."
                            fi
                        else
                            error_msg "‚ùå √âchec de la mise √† jour du paquet '$package_to_update'."
                        fi
                    done
                    success_msg "üéâ Mise √† jour des services termin√©e."
                else
                    info_msg "üö´ Mise √† jour annul√©e par l'utilisateur."
                fi
            fi
            ;;

        8.* )
            info_msg "üõ°Ô∏è  Gestion du pare-feu (firewalld) - CentOS"

            # V√©rifie si firewalld est actif
            if ! systemctl is-active firewalld &>/dev/null; then
                error_msg "Le service firewalld n'est pas actif. Tentative de d√©marrage..."
                if sudo systemctl start firewalld; then
                    success_msg "firewalld a √©t√© d√©marr√© avec succ√®s."
                else
                    error_exit "Impossible de d√©marrer firewalld. Op√©ration annul√©e."
                fi
            fi

            echo "Que souhaitez-vous faire ?"
            echo "1) üîì Ouvrir un port"
            echo "2) üîê Fermer un port"
            echo "3) ‚úÖ Autoriser un service (http, ssh, etc.)"
            echo "4) ‚ùå Supprimer un service autoris√©"
            read -rp "üëâ Entrez le num√©ro de votre choix : " CHOICE

            ZONE="public"

            case "$CHOICE" in
                1)
                    read -rp "üî¢ Entrez le port √† ouvrir (ex: 8080/tcp) : " PORT
                    if sudo firewall-cmd --zone=$ZONE --add-port="$PORT" --permanent && sudo firewall-cmd --reload; then
                        success_msg "Le port $PORT a √©t√© ouvert avec succ√®s."
                    else
                        error_msg "√âchec de l'ouverture du port $PORT."
                    fi
                    ;;
                2)
                    read -rp "üö™ Entrez le port √† fermer (ex: 8080/tcp) : " PORT
                    if sudo firewall-cmd --zone=$ZONE --remove-port="$PORT" --permanent && sudo firewall-cmd --reload; then
                        success_msg "Le port $PORT a √©t√© ferm√© avec succ√®s."
                    else
                        error_msg "√âchec de la fermeture du port $PORT."
                    fi
                    ;;
                3)
                    read -rp "üß© Entrez le nom du service √† autoriser (ex: http, ssh) : " SERVICE
                    if sudo firewall-cmd --zone=$ZONE --add-service="$SERVICE" --permanent && sudo firewall-cmd --reload; then
                        success_msg "Le service '$SERVICE' a √©t√© autoris√© avec succ√®s."
                    else
                        error_msg "√âchec de l'autorisation du service '$SERVICE'."
                    fi
                    ;;
                4)
                    read -rp "üßº Entrez le nom du service √† supprimer (ex: http, ssh) : " SERVICE
                    if sudo firewall-cmd --zone=$ZONE --remove-service="$SERVICE" --permanent && sudo firewall-cmd --reload; then
                        success_msg "Le service '$SERVICE' a √©t√© supprim√© avec succ√®s."
                    else
                        error_msg "√âchec de la suppression du service '$SERVICE'."
                    fi
                    ;;
                *)
                    error_msg "‚ùó Choix invalide. Veuillez s√©lectionner une option entre 1 et 4."
                    ;;
            esac
            ;;
        9.* )
            info_msg "üåê Gestion des zones de pare-feu (firewalld) - CentOS"

            # V√©rifie si firewalld est actif
            if ! systemctl is-active firewalld &>/dev/null; then
                error_msg "Le service firewalld n'est pas actif. Tentative de d√©marrage..."
                if sudo systemctl start firewalld; then
                    success_msg "firewalld a √©t√© d√©marr√© avec succ√®s."
                else
                    error_exit "Impossible de d√©marrer firewalld. Op√©ration annul√©e."
                fi
            fi

            # Liste des zones disponibles
            info_msg "üìã Zones disponibles :"
            mapfile -t zones < <(sudo firewall-cmd --get-zones)
            for i in "${!zones[@]}"; do
                printf "%3d) %s\n" $((i+1)) "${zones[$i]}"
            done

            read -rp "üî¢ Entrez le num√©ro de la zone √† modifier : " zone_index
            if ! [[ "$zone_index" =~ ^[0-9]+$ ]] || [ "$zone_index" -lt 1 ] || [ "$zone_index" -gt "${#zones[@]}" ]; then
                error_exit "‚ùå Num√©ro de zone invalide."
            fi

            selected_zone="${zones[$((zone_index-1))]}"
            info_msg "üîç Zone s√©lectionn√©e : $selected_zone"

            echo "Que souhaitez-vous faire avec la zone '$selected_zone' ?"
            echo "1) ‚úÖ Activer (zone par d√©faut)"
            echo "2) ‚ùå D√©sactiver (retirer comme zone par d√©faut)"
            read -rp "üëâ Entrez votre choix : " action_choice

            case "$action_choice" in
                1)
                    if sudo firewall-cmd --set-default-zone="$selected_zone"; then
                        success_msg "‚úÖ La zone '$selected_zone' est maintenant la zone par d√©faut."
                    else
                        error_msg "‚ùå Impossible d'activer la zone '$selected_zone'."
                    fi
                    ;;
                2)
                    info_msg "‚ÑπÔ∏è Vous ne pouvez pas d√©sactiver compl√®tement une zone, mais vous pouvez la vider ou la retirer des interfaces."
                    read -rp "üîå Voulez-vous retirer toutes les interfaces de cette zone ? (oui/non) : " confirm_clear
                    if [[ "$confirm_clear" =~ ^([oO][uU][iI]|[yY][eE][sS])$ ]]; then
                        ifaces=$(sudo firewall-cmd --zone="$selected_zone" --list-interfaces)
                        for iface in $ifaces; do
                            sudo firewall-cmd --zone="$selected_zone" --remove-interface="$iface" --permanent
                        done
                        sudo firewall-cmd --reload
                        success_msg "‚úÖ Toutes les interfaces ont √©t√© retir√©es de la zone '$selected_zone'."
                    else
                        info_msg "‚è≠Ô∏è Op√©ration annul√©e."
                    fi
                    ;;
                *)
                    error_msg "‚ùó Choix invalide. Veuillez s√©lectionner 1 ou 2."
                    ;;
            esac
            ;;
        10.* )
            info_msg "üîÑ Rechargement de la configuration du pare-feu (firewalld) - CentOS"

            # V√©rifier si firewalld est actif
            if ! systemctl is-active firewalld &>/dev/null; then
                error_msg "Le service firewalld n'est pas actif. Tentative de d√©marrage..."
                if sudo systemctl start firewalld; then
                    success_msg "‚úÖ firewalld a √©t√© d√©marr√© avec succ√®s."
                else
                    error_exit "‚ùå Impossible de d√©marrer firewalld. Rechargement annul√©."
                fi
            fi

            # Rechargement
            info_msg "üîÅ Rechargement en cours..."
            if sudo firewall-cmd --reload; then
                success_msg "‚úÖ La configuration du pare-feu a √©t√© recharg√©e avec succ√®s."
            else
                error_msg "‚ùå √âchec du rechargement du pare-feu."
            fi
            ;;
        11.* )
        info_msg() { echo -e "‚ÑπÔ∏è  $1"; }
        success_msg() { echo -e "‚úÖ $1"; }
        error_msg() { echo -e "‚ùå $1"; }
        error_exit() { error_msg "$1"; exit 1; }

        install_apache() {
            info_msg "Installation d'Apache..."
            sudo dnf install -y httpd || error_exit "√âchec de l'installation d'Apache"
            sudo systemctl enable --now httpd
            success_msg "Apache install√© et d√©marr√©."
        }

        install_nginx() {
            info_msg "Installation de Nginx..."
            sudo dnf install -y nginx || error_exit "√âchec de l'installation de Nginx"
            sudo systemctl enable --now nginx
            success_msg "Nginx install√© et d√©marr√©."
        }

        install_mariadb() {
            info_msg "Installation de MariaDB..."
            sudo dnf install -y mariadb-server || error_exit "√âchec de l'installation de MariaDB"
            sudo systemctl enable --now mariadb
            success_msg "MariaDB install√© et d√©marr√©."
            info_msg "S√©curisation initiale de MariaDB..."
            sudo mysql_secure_installation
        }

        install_postgresql() {
            info_msg "Installation de PostgreSQL..."
            sudo dnf install -y postgresql-server postgresql || error_exit "√âchec de l'installation de PostgreSQL"
            sudo postgresql-setup --initdb
            sudo systemctl enable --now postgresql
            success_msg "PostgreSQL install√©, initialis√© et d√©marr√©."
        }

        install_php() {
            info_msg "Installation de PHP..."
            sudo dnf install -y php php-cli php-common php-mysqlnd || error_exit "√âchec de l'installation de PHP"
            success_msg "PHP install√©."
        }

        install_mysql_client() {
            info_msg "Installation du client MySQL..."
            sudo dnf install -y mysql || error_exit "√âchec de l'installation du client MySQL"
            success_msg "Client MySQL install√©."
        }

        install_mongodb() {
            info_msg "Installation de MongoDB..."
            sudo tee /etc/yum.repos.d/mongodb-org.repo > /dev/null <<EOF
            [mongodb-org-6.0]
            name=MongoDB Repository
            baseurl=https://repo.mongodb.org/yum/redhat/\$releasever/mongodb-org/6.0/x86_64/
            gpgcheck=1
            enabled=1
            gpgkey=https://www.mongodb.org/static/pgp/server-6.0.asc
EOF


            sudo dnf install -y mongodb-org || error_exit "√âchec de l'installation de MongoDB"
            sudo systemctl enable --now mongodb
            success_msg "MongoDB install√© et d√©marr√©."
        }

        install_python() {
            info_msg "Installation de Python 3 et pip..."
            sudo dnf install -y python3 python3-pip || error_exit "√âchec de l'installation de Python 3"
            success_msg "Python 3 et pip install√©s."
        }

        install_nodejs() {
            info_msg "Installation de Node.js (version 18)..."
            sudo dnf module enable -y nodejs:18 || error_exit "√âchec de l'activation du module Node.js"
            sudo dnf install -y nodejs || error_exit "√âchec de l'installation de Node.js"
            success_msg "Node.js install√©."
        }

        install_full_stack() {
            info_msg "Installation compl√®te : Apache + PHP + MariaDB"
            install_apache
            install_php
            install_mariadb
            success_msg "Stack LAMP install√©e."
        }

        echo "üì¶ Que souhaitez-vous installer ?"
        echo "1) üåê Serveur Web : Apache (httpd)"
        echo "2) üåê Serveur Web : Nginx"
        echo "3) üóÑÔ∏è  Base de donn√©es : MariaDB"
        echo "4) üóÑÔ∏è  Base de donn√©es : PostgreSQL"
        echo "5) ‚öôÔ∏è  Environnement : PHP"
        echo "6) ‚öôÔ∏è  Environnement : MySQL (client uniquement)"
        echo "7) ‚öôÔ∏è  Environnement : MongoDB"
        echo "8) ‚öôÔ∏è  Environnement : Python"
        echo "9) ‚öôÔ∏è  Environnement : Node.js"
        echo "10) üöÄ Tout installer (Apache + PHP + MariaDB)"
        read -rp "üëâ Entrez le num√©ro de votre choix : " INSTALL_CHOICE

        case "$INSTALL_CHOICE" in
            1) install_apache ;;
            2) install_nginx ;;
            3) install_mariadb ;;
            4) install_postgresql ;;
            5) install_php ;;
            6) install_mysql_client ;;
            7) install_mongodb ;;
            8) install_python ;;
            9) install_nodejs ;;
            10) install_full_stack ;;
            *)
                error_msg "Choix invalide. Veuillez s√©lectionner un num√©ro entre 1 et 10."
                ;;
        esac


}